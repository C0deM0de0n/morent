generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String      @id() @default(cuid())
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt() @map("updated_at")
  name      String?
  surname   String?
  picture   String?
  email     String?     @unique()
  mobile    String?     @unique()
  googleId  String?     @unique()
  reviews   Reviews[]
  Cart      Cart[]
  favorites Favorites[]
  role      Role        @default(USER)

  @@map("user")
}

model Favorites {
  id            String          @id() @default(cuid())
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt() @map("updated_at")
  favoritesItem FavoritesItem[]

  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("favorite")
}

model FavoritesItem {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  product     Products  @relation(fields: [productId], references: [id])
  favorite    Favorites @relation(fields: [favoritesId], references: [id])
  productId   String    @map("product_id")
  favoritesId String    @map("favorite_id")

  @@unique([favoritesId, productId])
  @@map("favorite_items")
}

model Cart {
  id        String      @id() @default(cuid())
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt() @map("updated_at")
  cartItems CartItems[]

  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("cart")
}

model CartItems {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  quantity  Int      @default(1)

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")
  cartId    String   @map("cart_id")

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Products {
  id            String          @id() @default(cuid())
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt() @map("updated_at")
  name          String
  description   String
  icons         String[]        @default([])
  type          CarType
  steering      CarSteering
  capacity      Capacity
  gasoline      Int
  price         Float
  discount      Discounts[]
  reviews       Reviews[]
  cartItems     CartItems[]
  favoritesItem FavoritesItem[]

  @@map("product")
}

model Discounts {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  discount  Int

  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")

  @@map("discount")
}

model Reviews {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  rating    Int
  comment   String

  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")
  userId    String   @map("user_id")

  @@unique([userId, productId])
  @@map("review")
}

enum CarType {
  SPORT
  SUV
  MPV
  SEDAN
  COUPE
  HATCHBACK
}

enum CarSteering {
  LEFT
  RIGHT
}

enum Capacity {
  TWO
  FOUR
  SIX
  EIGHT
}

enum Role {
  ADMIN
  USER
}
